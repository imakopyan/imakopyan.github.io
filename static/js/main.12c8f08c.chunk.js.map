{"version":3,"sources":["SearchList.css","SearchBar.js","SearchResult.js","SearchList.js","parseJson.js","App.js","serviceWorker.js","index.js","SearchBar.css","App.css"],"names":["module","exports","SearchList","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSearchSubmit","bind","assertThisInitialized","handleSearchChange","event","preventDefault","onSearchSubmit","onSearchChange","target","value","react_default","a","createElement","className","s","onSubmit","type","placeholder","autoFocus","onChange","SearchBarBtn","Component","SearchResult","href","link","rel","title","description","searchResultsArray","result","map","src_SearchResult_0","key","parseJson","_ref","_ref2","slicedToArray","titles","descriptions","links","i","App","state","searchQuery","submit","searchResults","handleSearch","handleChange","_this2","url","concat","encodeURIComponent","Promise","resolve","fetch","cache","then","response","ok","Error","json","setState","isLoading","catch","e","hasError","AppHeader","src_SearchBar_0","src_SearchList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","App-logo","App-logo-spin","App-link"],"mappings":"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","file":"static/js/main.12c8f08c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchList\":\"SearchList__SearchList___eK0he\"};","import React, { Component } from 'react';\nimport s from './SearchBar.css';\n\nclass SearchBar extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSearchSubmit = this.handleSearchSubmit.bind(this);\n        this.handleSearchChange = this.handleSearchChange.bind(this);\n    }\n\n    handleSearchSubmit(event) {\n        event.preventDefault();\n        this.props.onSearchSubmit();\n    }\n\n    handleSearchChange(event) {\n        this.props.onSearchChange(event.target.value);\n      }\n\n    render() {\n        return (\n            <div className={s.SearchBar}>\n                <h1>Wikipedia Search</h1>\n                <form onSubmit={this.handleSearchSubmit}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Введите запрос\"\n                        autoFocus\n                        onChange={this.handleSearchChange} />\n                    <button className={s.SearchBarBtn}>\n                    Поиск\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React, { Component } from 'react';\nimport s from './SearchResult.css';\n\nclass SearchResult extends Component {\n    render() {\n      return (\n        <section className={s.SearchResult}>\n          <h2 className=\"title\">\n            <a href={this.props.link} target=\"_blank\" rel=\"nofollow noopener\">\n              {this.props.title}\n            </a>\n          </h2>\n          <p className=\"description\">\n            {this.props.description}\n          </p>\n        </section>\n      );\n    }\n  }\n  \n  export default SearchResult;","import React, { Component } from 'react';\nimport SearchResult from './SearchResult';\nimport s from './SearchList.css';\n\nclass SearchList extends Component {\n\n    \nrender() {\n    const searchResultsArray\n    = this.props.result.map((result) =>\n        <SearchResult\n          title={result.title}\n          description={result.description}\n          link={result.link}\n          key={result.link} />\n      );\n    return (\n      <section className={s.SearchList}>\n        {searchResultsArray}\n      </section>\n    );\n}\n}\n\nexport default SearchList;\n","/*\n * Flattens the Opensearch results into one array, where the title, description\n * and link for each article are bundled in a single object\n */\n\nfunction parseJson([, titles, descriptions, links]) {\n    return titles.map((title, i) => ({\n      title,\n      description: descriptions[i],\n      link: links[i],\n    }));\n  }\n\n  export default parseJson;\n  ","import React, { Component } from 'react';\nimport SearchBar from './SearchBar';\nimport SearchList from './SearchList';\nimport parseJson from './parseJson';\n\nimport s from './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchQuery: '',\n      submit: false,\n      searchResults: [],\n    };\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n  }\n\n\n  handleSearch() {\n    const url = `https://ru.wikipedia.org/w/api.php?action=opensearch&origin=*&format=json&formatversion=2&search=${encodeURIComponent(this.state.searchQuery)}`;\n    Promise.resolve(fetch(url, {cache: 'no-cache'}))\n    .then((response) => {\n      if (!response.ok) throw new Error('Error');\n      return response.json();\n    })\n    .then(parseJson)\n    .then((searchResults) => this.setState({searchResults, isLoading: false}))\n    .catch((e) => this.setState({isLoading: false, hasError: true}));\n  }\n  \n  handleChange(searchQuery) {\n    this.setState({\n      searchQuery,\n    })\n  }\n\n  render() {\n    return (\n      <div className={s.App}>\n        <header className={s.AppHeader}>\n      <SearchBar \n        onSearchSubmit={this.handleSearch}\n        onSearchChange={this.handleChange}\n      />\n      <SearchList\n      result={this.state.searchResults} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchBarBtn\":\"SearchBar__SearchBarBtn___3tNxg\",\"SearchBar\":\"SearchBar__SearchBar___1pzrP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App___1o-Fp\",\"App-logo\":\"App__App-logo___3JCPt\",\"App-logo-spin\":\"App__App-logo-spin___RvI1J\",\"AppHeader\":\"App__AppHeader___1k1Hg\",\"App-link\":\"App__App-link___13fTZ\"};"],"sourceRoot":""}